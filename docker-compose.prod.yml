version: "3.4"

services:
  core:
    build:
      context: ./users
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      SECRET: ${SECRET}
      MONGODB_URI: "mongodb://mongo:27017/flawis?replicaSet=rs0"
      RMQ_EXCHANGE: ${RMQ_EXCHANGE}
    depends_on:
      minio:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
      mongo:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    ports:
      - "5000:5000"

  client13:
    build:
      context: ./client13
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_URL=${BACKEND_URL}
    command: npm run start-prod
    depends_on:
      - core
    restart: unless-stopped
    ports:
      - "3000:3000"

  mail:
    build:
      context: ./mail
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      SECRET: ${SECRET}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      # MAIL_USER: ${MAIL_USER}
      # MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
      RMQ_URI: ${RMQ_URI}
      RMQ_EXCHANGE: ${RMQ_EXCHANGE}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD-SHELL", "mc ready local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping && rabbitmq-diagnostics -q status
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  redis:
    image: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "echo 'PING' | redis-cli -h redis -x"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  mongo:
    image: mongo:4.4.1
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongo_data: {}
  mongo_config: {}
  minio_storage: {}
