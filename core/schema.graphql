# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AcademicYear {
  academicYear: String!
  count: Int!
}

"""User access inside the FLAWIS system"""
enum Access {
  Admin
  ConferenceAttendee
  Organization
  Student
}

type Address {
  city: String!
  country: String!
  postal: String!
  street: String!
}

input AddressInput {
  city: String!
  country: String!
  postal: String!
  street: String!
}

"""Attendee model type"""
type Attendee {
  conference: Conference!
  createdAt: DateTimeISO!
  id: ObjectId!
  invoice: Invoice!
  submissions: [Submission!]!
  ticket: Ticket!
  updatedAt: DateTimeISO!
  user: UserStubUnion!
}

input AttendeeBillingInput {
  DIC: String
  ICDPH: String
  ICO: String
  address: AddressInput!
  name: String!
}

"""AttendeeConnection type enabling cursor based pagination"""
type AttendeeConnection {
  edges: [AttendeeEdge]!
  pageInfo: AttendeePageInfo!
  totalCount: Int!
}

type AttendeeEdge {
  cursor: String!
  node: Attendee!
}

input AttendeeFilterInput {
  conferenceSlug: String!
  passive: Boolean
  sectionIds: [ObjectId]! = []
}

"""Conference registration input type"""
input AttendeeInput {
  billing: AttendeeBillingInput!
  conferenceId: ObjectId!
  ticketId: ObjectId!
}

type AttendeeMutationResponse implements IMutationResponse {
  data: Attendee!
  message: String!
}

type AttendeePageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input AttendeeSortInput {
  direction: SortDirection!
  field: AttendeeSortableField!
}

"""Sortable enum definition for attendees query"""
enum AttendeeSortableField {
  ID
  NAME
}

"""Billing information"""
type Billing {
  DIC: String
  ICDPH: String
  ICO: String
  address: Address!
  name: String!
}

"""Conference model type"""
type Conference {
  attendeesCount: Int!
  attending: Attendee
  billing: FlawBilling!
  createdAt: DateTimeISO!
  dates: ImportantDates!
  id: ObjectId!
  sections: [Section!]!
  slug: String!
  tickets: [Ticket!]!
  translations: ConferenceTranslation!
  updatedAt: DateTimeISO!
}

"""ConferenceConnection type enabling cursor based pagination"""
type ConferenceConnection {
  edges: [ConferenceEdge]!
  pageInfo: ConferencePageInfo!
  totalCount: Int!
}

type ConferenceEdge {
  cursor: String!
  node: Conference!
}

"""Conference input type"""
input ConferenceInput {
  billing: FlawBillingInput!
  dates: DatesInput!
  slug: String!
  translations: ConferenceTranslationInput!
}

type ConferenceMutationResponse implements IMutationResponse {
  data: Conference!
  message: String!
}

type ConferencePageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input ConferenceSortInput {
  direction: SortDirection!
  field: ConferenceSortableField!
}

"""Sortable enum definition for conferences query"""
enum ConferenceSortableField {
  ID
}

type ConferenceTranslation {
  en: ConferenceTranslations!
  sk: ConferenceTranslations!
}

input ConferenceTranslationInput {
  en: LocalizedConferenceInputs!
  sk: LocalizedConferenceInputs!
}

type ConferenceTranslations {
  """Logourl transformed with regards to staging/production env"""
  logoUrlEnv: String!
  name: String!
}

type Course {
  createdAt: DateTimeISO!

  """String representation of HTML describing the course"""
  description: String!
  id: ObjectId!
  isPaid: Boolean!
  name: String!
  owner: UserStub!
  price: Int!
  procurer: UserStub
  updatedAt: DateTimeISO!
}

input CourseInput {
  billing: FlawBillingInput
  description: String!
  name: String!
  price: Int!
}

type CourseMutationResponse implements IMutationResponse {
  data: Course!
  message: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DatesInput {
  end: DateTimeISO!
  regEnd: DateTimeISO
  start: DateTimeISO!
  submissionDeadline: DateTimeISO
}

"""Flaw billing information"""
type FlawBilling {
  DIC: String!
  IBAN: String!
  ICDPH: String!
  ICO: String!
  SWIFT: String!
  address: Address!
  name: String!
  variableSymbol: String!
}

input FlawBillingInput {
  DIC: String!
  IBAN: String!
  ICDPH: String!
  ICO: String!
  SWIFT: String!
  address: AddressInput!
  name: String!
  variableSymbol: String!
}

interface IMutationResponse {
  message: String!
}

"""Important dates regarding conference"""
type ImportantDates {
  end: DateTimeISO!
  regEnd: DateTimeISO
  start: DateTimeISO!
  submissionDeadline: DateTimeISO
}

"""Ovject type representing student who applies for an internship"""
type Intern {
  createdAt: DateTimeISO!
  fileUrls: [String!]!
  id: ObjectId!
  internship: ObjectId!
  organization: String!
  organizationFeedbackUrl: String
  status: Status!
  updatedAt: DateTimeISO!
  user: StudentReference!
}

"""InternConnection type enabling cursor based pagination"""
type InternConnection {
  edges: [InternEdge]!
  pageInfo: InternPageInfo!
  totalCount: Int!
}

type InternEdge {
  cursor: String!
  node: Intern!
}

input InternFilterInput {
  endDate: DateTimeISO
  internship: ObjectId
  startDate: DateTimeISO
  status: [Status!]
  user: ObjectId
}

type InternMutationResponse implements IMutationResponse {
  data: Intern!
  message: String!
}

type InternPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input InternSortInput {
  direction: SortDirection!
  field: InternSortableField!
}

"""Sortable enum definition for interns query"""
enum InternSortableField {
  ID
  NAME
}

"""Internship object type"""
type Internship {
  academicYear: String!
  applicationsCount: Int!
  createdAt: DateTimeISO!

  """String representation of internship listing's HTML page"""
  description: String!
  id: ObjectId!
  myApplication: Intern
  organization: String!
  updatedAt: DateTimeISO!
  user: ObjectId!
}

"""InternshipConnection type enabling cursor based pagination"""
type InternshipConnection {
  academicYears: [AcademicYear!]!
  edges: [InternshipEdge]!
  organizations: [OrganizationCount!]!
  pageInfo: InternshipPageInfo!
  totalCount: Int!
}

type InternshipEdge {
  cursor: String!
  node: Internship!
}

input InternshipFilterInput {
  academicYear: String
  endDate: DateTimeISO
  organizations: [String!]
  startDate: DateTimeISO
  user: ObjectId
}

input InternshipInput {
  description: String!
}

type InternshipMutationResponse implements IMutationResponse {
  data: Internship!
  message: String!
}

type InternshipPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input InternshipSortInput {
  direction: SortDirection!
  field: InternshipSortableField!
}

"""Sortable enum definition for interships query"""
enum InternshipSortableField {
  CREARTED_AT
  HAS_APPLICATION
  ORGANIZATION
}

"""Invoice entity subdocument type"""
type Invoice {
  body: InvoiceData!
  issuer: FlawBilling!
  payer: Billing!
}

"""The body of an invoice"""
type InvoiceData {
  body: String!
  comment: String!
  dueDate: DateTimeISO!
  issueDate: DateTimeISO!
  price: Float!
  type: String!
  vat: Float!
  vatDate: DateTimeISO!
}

input InvoiceDataInput {
  body: String!
  comment: String!
  dueDate: DateTimeISO!
  issueDate: DateTimeISO!
  price: Float!
  type: String!
  vat: Float!
  vatDate: DateTimeISO!
}

input InvoiceInput {
  body: InvoiceDataInput!
  issuer: FlawBillingInput!
  payer: AttendeeBillingInput!
}

input LocalizedConferenceInputs {
  logoUrl: String!
  name: String!
}

input LocalizedSectionInputs {
  name: String!
  topic: String!
}

input LocalizedSubmissionInputs {
  abstract: String!
  keywords: [String!]!
  name: String!
}

input LocalizedTicketInputs {
  description: String!
  name: String!
}

type Mutation {
  """Adds currently logged in user as the co-author of a submission"""
  acceptAuthorInvite: SubmissionMutationResponse!
  activateUser: UserMutationResponse!
  addAttendee(data: AttendeeInput!): ConferenceMutationResponse!
  changeInternStatus(id: ObjectId!, status: Status!): InternMutationResponse!
  createConference(data: ConferenceInput!): ConferenceMutationResponse!
  createCourse(data: CourseInput!): CourseMutationResponse!
  createIntern(fileUrls: [String]!, internshipId: ObjectId!): InternMutationResponse!
  createInternship(input: InternshipInput!): InternshipMutationResponse!
  createSection(data: SectionInput!): SectionMutationResponse!
  createSubmission(data: SubmissionInput!, ticketId: ObjectId!): SubmissionMutationResponse!
  createTicket(data: TicketInput!, slug: String!): ConferenceMutationResponse!
  deleteAttendee(id: ObjectId!): AttendeeMutationResponse!
  deleteConference(id: ObjectId!): ConferenceMutationResponse!
  deleteCourse(id: ObjectId!): CourseMutationResponse!
  deleteIntern(id: ObjectId!): InternMutationResponse!
  deleteInternship(id: ObjectId!): InternshipMutationResponse!
  deleteSection(id: ObjectId!): SectionMutationResponse!
  deleteSubmission(id: ObjectId!): SubmissionMutationResponse!
  deleteTicket(slug: String!, ticketId: ObjectId!): ConferenceMutationResponse!
  deleteUser(id: ObjectId!): UserMutationResponse!
  googleSignIn(authCode: String!): UserMutationResponse!
  login(email: String!, password: String!): UserMutationResponse!
  passwordReset(data: PasswordInput!): UserMutationResponse!
  register(data: RegisterUserInput!): UserMutationResponse!
  removeAuthor(authorId: ObjectId!, id: ObjectId!): SubmissionMutationResponse!
  resendActivationLink: String!
  toggleVerifiedUser(id: ObjectId!, verified: Boolean!): UserMutationResponse!
  updateConferenceDates(data: DatesInput!, slug: String!): ConferenceMutationResponse!
  updateCourse(data: CourseInput!, id: ObjectId!): CourseMutationResponse!
  updateInternFiles(fileUrls: [String]!, id: ObjectId!): InternMutationResponse!
  updateInternship(id: ObjectId!, input: InternshipInput!): InternshipMutationResponse!
  updateInvoice(data: InvoiceInput!, id: ObjectId!): AttendeeMutationResponse!
  updateOrgFeedback(fileUrl: String, id: ObjectId!): InternMutationResponse!
  updateSection(data: SectionInput!, id: ObjectId!): SectionMutationResponse!
  updateSubmission(data: SubmissionInput!, id: ObjectId!, ticketId: ObjectId!): SubmissionMutationResponse!
  updateTicket(data: TicketInput!, slug: String!, ticketId: ObjectId!): ConferenceMutationResponse!
  updateUser(data: UserInput!, id: ObjectId!): UserMutationResponse!
}

"""Mongo object id scalar type"""
scalar ObjectId

type OrganizationCount {
  count: Int!
  organization: String!
}

"""
Addresses of the organizations you want to invite to FlawIS/internships
"""
input OrganizationEmails {
  emails: [String!]!
}

input PasswordInput {
  password: String!
}

"""Language the speaker will be presenting his submission in"""
enum PresentationLng {
  CZ
  EN
  SK
}

type Query {
  attendee(id: ObjectId!): Attendee!
  attendees(after: String, filter: AttendeeFilterInput, first: Int! = 20, sort: [AttendeeSortInput]!): AttendeeConnection!
  attendeesCsvExport(slug: String!): [Attendee!]!
  conference(slug: String!): Conference!
  conferences(after: String, first: Int! = 20, sort: [ConferenceSortInput]!): ConferenceConnection!
  course(id: ObjectId!): Course!
  forgotPassword(email: String!): String!
  intern(id: ObjectId!): Intern!
  interns(after: String, filter: InternFilterInput, first: Int! = 20, sort: [InternSortInput]!): InternConnection!
  internsExport: [Intern]!
  internship(id: ObjectId!): Internship!
  internships(after: String, filter: InternshipFilterInput, first: Int! = 20, sort: [InternshipSortInput]!): InternshipConnection!
  inviteUsers(input: OrganizationEmails!): String!
  me: User!
  submission(id: ObjectId!): Submission!
  textSearchAttendee(slug: String!, text: String!): [Attendee!]!
  textSearchConference(text: String!): [Conference!]!
  textSearchUser(text: String!): [User!]!
  user(id: ObjectId!): User!
  users(after: String, filter: UserFilterInput, first: Int! = 20, sort: [UserSortInput]!): UserConnection!
}

"""New user input data"""
input RegisterUserInput {
  access: [Access!]
  address: AddressInput
  avatarUrl: String
  cvUrl: String
  email: String!
  name: String!
  organization: String
  password: String!
  studyProgramme: StudyProgramme
  telephone: String
}

"""Conference's section entity model type"""
type Section {
  conference: Conference
  createdAt: DateTimeISO!
  id: ID!
  submissions(after: String, filter: SubmissionFilterInput, first: Int! = 20, sort: [SubmissionSortInput]!): SubmissionConnection!
  translations: SectionTranslation!
  updatedAt: DateTimeISO!
}

"""Section input type"""
input SectionInput {
  conference: ObjectId!
  translations: SectionTranslationInput!
}

type SectionMutationResponse implements IMutationResponse {
  data: Section!
  message: String!
}

type SectionTranslation {
  en: SectionTranslations!
  sk: SectionTranslations!
}

input SectionTranslationInput {
  en: LocalizedSectionInputs!
  sk: LocalizedSectionInputs!
}

type SectionTranslations {
  name: String!
  topic: String!
}

"""Ascending/descending direction of the sort field"""
enum SortDirection {
  ASC
  DESC
}

"""Intern status"""
enum Status {
  Accepted
  Applied
  Eligible
  Rejected
}

"""User stub type"""
type StudentReference {
  address: Address!
  avatarUrl: String
  email: String!

  """User document id"""
  id: ObjectId!
  name: String!
  studyProgramme: StudyProgramme!
  telephone: String!
}

"""Student user account StudyProgramme"""
enum StudyProgramme {
  Bachelor1
  Bachelor2
  Bachelor3
  Master1
  Master2
}

"""Submission entity model type"""
type Submission {
  authors: [User!]!
  conference: Conference!
  createdAt: DateTimeISO!
  fileUrl: String
  id: ObjectId!
  presentationLng: PresentationLng
  section: Section!
  translations: SubmissionTranslation!
  updatedAt: DateTimeISO!
}

type SubmissionConnection {
  edges: [SubmissionEdge]!
  pageInfo: SubmissionPageInfo!
  totalCount: Int!
}

type SubmissionEdge {
  cursor: String!
  node: Submission!
}

input SubmissionFilterInput {
  conferenceId: ObjectId
  sectionIds: [ObjectId!]
}

input SubmissionInput {
  authors: [String]!
  conference: ObjectId!
  fileUrl: String
  presentationLng: PresentationLng!
  section: ObjectId!
  translations: SubmissionTranslationInput!
}

type SubmissionMutationResponse implements IMutationResponse {
  data: Submission!
  message: String!
}

type SubmissionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input SubmissionSortInput {
  direction: SortDirection!
  field: SubmissionSortableField!
}

"""Sortable enum definition for submissions query"""
enum SubmissionSortableField {
  ID
}

type SubmissionTranslation {
  en: SubmissionTranslationContent!
  sk: SubmissionTranslationContent!
}

type SubmissionTranslationContent {
  abstract: String!
  keywords: [String!]!
  name: String!
}

input SubmissionTranslationInput {
  en: LocalizedSubmissionInputs!
  sk: LocalizedSubmissionInputs!
}

"""Conference ticket"""
type Ticket {
  id: ObjectId!
  online: Boolean!
  price: Int!
  translations: TicketTranslation!
  withSubmission: Boolean!
}

input TicketInput {
  online: Boolean!
  price: Int!
  translations: TicketTranslationInput!
  withSubmission: Boolean!
}

type TicketTranslation {
  en: TicketTranslations!
  sk: TicketTranslations!
}

input TicketTranslationInput {
  en: LocalizedTicketInputs!
  sk: LocalizedTicketInputs!
}

type TicketTranslations {
  description: String!
  name: String!
}

"""The user model entity"""
type User {
  access: [Access!]!
  address: Address
  avatarUrl: String
  billings: [Billing]!
  createdAt: DateTimeISO!
  cvUrl: String
  email: String!
  id: ObjectId!
  name: String!
  organization: String
  studyProgramme: StudyProgramme
  telephone: String
  token: String!
  updatedAt: DateTimeISO!
  verified: Boolean!
}

"""UserConnection type enabling cursor based pagination"""
type UserConnection {
  edges: [UserEdge]!
  pageInfo: UserPageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

input UserFilterInput {
  access: [Access!]
}

"""FlawIS user base input"""
input UserInput {
  access: [Access!]
  address: AddressInput
  avatarUrl: String
  cvUrl: String
  email: String!
  name: String!
  organization: String
  password: String
  studyProgramme: StudyProgramme
  telephone: String
}

type UserMutationResponse implements IMutationResponse {
  data: User!
  message: String!
}

type UserPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input UserSortInput {
  direction: SortDirection!
  field: UserSortableField!
}

"""Sortable enum definition for users query"""
enum UserSortableField {
  ID
  NAME
}

type UserStub {
  email: String!
  id: ObjectId!
  name: String!
}

union UserStubUnion = User | UserStub