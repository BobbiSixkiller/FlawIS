# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type Address {
  city: String!
  country: String!
  postal: String!
  street: String!
}

input AddressInput {
  city: String!
  country: String!
  postal: String!
  street: String!
}

"""Attendee model type"""
type Attendee {
  conference: Conference!
  createdAt: DateTime!
  id: ID!
  invoice: Invoice!
  online: Boolean!
  submissions: [Submission!]!
  updatedAt: DateTime!
  user: User!
  withSubmission: Boolean!
}

input AttendeeBillingInput {
  DIC: String!
  ICDPH: String!
  ICO: String!
  address: AddressInput!
  name: String!
}

"""AttendeeConnection type enabling cursor based pagination"""
type AttendeeConnection {
  edges: [AttendeeEdge]!
  pageInfo: AttendeePageInfo!
}

type AttendeeEdge {
  cursor: ObjectId!
  node: Attendee!
}

input AttendeeInput {
  billing: AttendeeBillingInput!
  conferenceId: ObjectId!
  ticketId: ObjectId!
}

type AttendeePageInfo {
  endCursor: ObjectId!
  hasNextPage: Boolean!
}

"""Billing information"""
type Billing {
  DIC: String
  ICDPH: String
  ICO: String
  address: Address!
  name: String!
}

input BillingInput {
  DIC: String!
  IBAN: String!
  ICDPH: String!
  ICO: String!
  SWIFT: String!
  address: AddressInput!
  name: String!
  stampUrl: String!
  variableSymbol: String!
}

"""Conference model type"""
type Conference {
  attendees(after: String, first: Int = 20): AttendeeConnection!
  attendeesCount: Int!
  attending: Boolean!
  billing: ConferenceBilling!
  contact: Contact
  createdAt: DateTime!
  dates: ImportantDates!
  description: String!
  id: ObjectId!
  logoUrl: String!
  name: String!
  sections: [Section!]!
  slug: String!
  tickets: [Ticket!]!
  translations: [ConferenceTranslation!]!
  updatedAt: DateTime!
}

"""Conference billing organization"""
type ConferenceBilling {
  DIC: String
  IBAN: String!
  ICDPH: String
  ICO: String
  SWIFT: String!
  address: Address!
  name: String!
  stampUrl: String!
  variableSymbol: String!
}

type ConferenceConnection {
  edges: [ConferenceEdge]!
  pageInfo: ConferencePageInfo!
  year: Int!
}

type ConferenceEdge {
  cursor: ObjectId!
  node: Conference!
}

"""Conference input type"""
input ConferenceInput {
  billing: BillingInput!
  dates: DatesInput!
  description: String!
  logoUrl: String!
  name: String!
  slug: String!
  translations: [ConferenceInputTranslation!]
}

input ConferenceInputTranslation {
  description: String!
  language: String!
  logoUrl: String!
  name: String!
  tickets: [TicketInputTranslation!]
}

type ConferencePageInfo {
  endCursor: ObjectId!
  hasNextPage: Boolean!
}

type ConferenceTranslation {
  description: String!
  language: String!
  logoUrl: String!
  name: String!
  tickets: [TicketTranslation!]!
}

"""User input type"""
input ConferenceUserInput {
  organisation: String!
  telephone: String!
}

"""Conference contact information"""
type Contact {
  address: Address!
  conferenceTeam: [String!]!
  email: String!
  name: String!
  scientificTeam: [String!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DatesInput {
  end: DateTime!
  regEnd: DateTime
  start: DateTime!
  submissionDeadline: DateTime
}

"""Important dates regarding conference"""
type ImportantDates {
  end: DateTime!
  regEnd: DateTime
  start: DateTime!
  submissionDeadline: DateTime
}

"""Invoice entity subdocument type"""
type Invoice {
  body: InvoiceData!
  issuer: String!
  payer: Billing!
}

"""The body of an invoice"""
type InvoiceData {
  body: String!
  comment: String!
  dueDate: DateTime!
  issueDate: DateTime!
  ticketPrice: Int!
  type: String!
  variableSymbol: String!
  vat: Int!
  vatDate: DateTime!
}

input InvoiceDataInput {
  body: String!
  comment: String!
  dueDate: DateTime!
  issueDate: DateTime!
  ticketPrice: Int!
  type: String!
  variableSymbol: String!
  vat: Int!
  vatDate: DateTime!
}

"""Invoice data input type facilitating attendee's invoice update"""
input InvoiceInput {
  body: InvoiceDataInput
  issuer: BillingInput
  payer: BillingInput
}

type Mutation {
  addAttendee(data: AttendeeInput!): Attendee!
  addSubmission(data: SubmissionInput!): Submission!
  createConference(data: ConferenceInput!): Conference!
  createSection(data: SectionInput!, id: ObjectId!): Section!
  deleteConference(id: ObjectId!): Boolean!
  deleteSection(id: ObjectId!): Boolean!
  deleteSubmission(id: ObjectId!): Boolean!
  removeAttendee(id: ObjectId!): Boolean!
  updateConference(data: ConferenceInput!, id: ObjectId!): Conference!
  updateConferenceUser(data: ConferenceUserInput!): User!
  updateInvoice(data: InvoiceInput!, id: ObjectId!): Attendee!
  updateSection(data: SectionInput!, id: ObjectId!): Section!
  updateSubmission(data: SubmissionInput!, id: ObjectId!): Submission!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  attendee(id: ObjectId!): Attendee!
  conference(slug: String!): Conference!
  conferences(year: Int!): ConferenceConnection!
  section(id: ObjectId!): Section!
  submission(id: ObjectId!): Submission!
}

"""Conference's section entity model type"""
type Section {
  conference: String!
  createdAt: DateTime!
  description: String!
  id: ID!
  languages: [String!]!
  name: String!
  submissions: [Submission!]!
  translations: [SectionTranslation!]!
  updatedAt: DateTime!
}

"""Conference section input type"""
input SectionInput {
  description: String!
  languages: [String!]!
  name: String!
  translations: [TranslationInput!]!
}

type SectionTranslation {
  description: String!
  language: String!
  name: String!
}

"""Submission entity model type"""
type Submission {
  abstract: String!
  authors: [User!]!
  conference: Conference!
  createdAt: DateTime!
  id: ID!
  keywords: [String!]!
  name: String!
  section: Section!
  submissionUrl: String
  translations: [SubmissionTranslation!]!
  updatedAt: DateTime!
}

input SubmissionInput {
  abstract: String!
  authors: [String!]
  conferenceId: ObjectId
  keywords: [String!]!
  name: String!
  sectionId: ObjectId
  submissionUrl: String
  translations: [SubmissionInputTranslation!]!
}

input SubmissionInputTranslation {
  abstract: String!
  keywords: [String!]!
  language: String!
  name: String!
}

type SubmissionTranslation {
  abstract: String!
  keywords: [String!]!
  language: String!
  name: String!
}

"""Conference ticket"""
type Ticket {
  description: String!
  id: ID!
  name: String!
  online: Boolean!
  price: Int!
  withSubmission: Boolean!
}

input TicketInputTranslation {
  description: String!
  language: String!
  name: String!
}

type TicketTranslation {
  description: String!
  language: String!
  name: String!
}

input TranslationInput {
  description: String!
  language: String!
  name: String!
}

"""
User reference type from users microservice with contributed billings field
"""
type User {
  billings: [Billing]!
  email: String!
  id: ObjectId!
  name: String!
  organisation: String!
  telephone: String!
}
