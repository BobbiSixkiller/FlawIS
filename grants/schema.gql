# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type Announcement {
  createdAt: DateTime!
  files: [String!]
  id: ID!
  name: String!
  text: String!
  updatedAt: DateTime!
}

type Approved {
  indirect: Int!
  material: Int!
  salaries: Int!
  services: Int!
  travel: Int!
}

"""Budget schema type"""
type Budget {
  approved: Approved!
  createdAt: DateTime!
  members: [Member]!
  spent: Spent
  updatedAt: DateTime!
  year: DateTime!
}

input BudgetInput {
  indirect: Float!
  material: Float!
  salaries: Float!
  services: Float!
  travel: Float!
  year: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Grant model type"""
type Grant {
  announcements: [Announcement]!
  budgets: [Budget]!
  createdAt: DateTime!
  end: DateTime!
  id: ID!
  name: String!
  start: DateTime!
  type: GrantType!
  updatedAt: DateTime!
}

"""GrantConnection type enabling cursor based pagination"""
type GrantConnection {
  edges: [GrantEdge]!
  pageInfo: PageInfo!
}

type GrantEdge {
  cursor: ObjectId!
  node: Grant!
}

input GrantInput {
  end: DateTime!
  name: String!
  start: DateTime!
  type: GrantType!
}

"""Type of grants inside the FLAWIS system"""
enum GrantType {
  APVV
  KEGA
  VEGA
}

"""Member schema type"""
type Member {
  createdAt: DateTime!
  hours: Float!
  isMain: Boolean!
  updatedAt: DateTime!
  user: User!
}

input MemberInput {
  hours: Float!
  isMain: Boolean!
  user: String!
}

type Mutation {
  addApprovedBudget(data: BudgetInput!, id: ObjectId!): Grant!
  addMember(data: MemberInput!, id: ObjectId!, year: DateTime!): Grant!
  addSpentBudget(data: BudgetInput!, id: ObjectId!): Grant!
  createGrant(data: GrantInput!): Grant!
  deleteGrant(id: ObjectId!): Boolean!
  updategrant(data: GrantInput!, id: ObjectId!): Grant!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PageInfo {
  endCursor: ObjectId!
  hasNextPage: Boolean!
}

type Query {
  grant(id: ObjectId!): Grant!
  grantTextSearch(text: String!): [Grant!]!
  grants(after: ObjectId, first: Int = 20): GrantConnection!
}

type Spent {
  indirect: Int!
  material: Int!
  salaries: Int!
  services: Int!
  travel: Int!
}

type User {
  grants(year: DateTime!): Int
  hours(year: DateTime!): Int!
  id: ID!
}
