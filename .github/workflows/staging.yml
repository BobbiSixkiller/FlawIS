name: Build and Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  # ----------------------------
  # Job 1: MongoDB Backup
  # ----------------------------
  mongo:
    runs-on: [HyperV]
    steps:
      - name: Show workspace
        run: echo "Workspace: $PWD"

      - name: Ensure backup directory exists
        run: mkdir -p ./backup

      - name: Copy MongoDB data from production
        run: |
          echo "Starting MongoDB backup from production..."
          docker exec flawis-mongo-1 sh -c 'mongodump --uri="mongodb://localhost:27017" --out=/data/backup'
          docker cp flawis-mongo-1:/data/backup ./backup
          echo "MongoDB backup saved to ./backup"

  # ----------------------------
  # Job 2: MinIO Sync
  # ----------------------------
  minio:
    runs-on: [HyperV]
    steps:
      - name: Show workspace
        run: echo "Workspace: $PWD"

      - name: Install MinIO client
        run: |
          if ! command -v mc &> /dev/null; then
            wget https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            mkdir -p $HOME/bin
            mv mc $HOME/bin
            echo "$HOME/bin" >> $GITHUB_PATH
          fi

      - name: Copy Data from Production MinIO to Staging MinIO
        run: |
          echo "Syncing MinIO production data to staging..."
          mc alias set production http://localhost:9000 ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
          mc alias set staging http://localhost:9100 ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
          mc mirror production/ staging/
          echo "MinIO sync completed."

  # ----------------------------
  # Job 3: Deploy Staging
  # ----------------------------
  deploy:
    runs-on: [HyperV]
    needs: [mongo, minio]
    environment: staging
    steps:
      - name: Show workspace
        run: echo "Workspace: $PWD"
        
      - name: Checkout code (if needed)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Restore MongoDB to staging
        run: |
          echo "Restoring MongoDB backup to staging..."
          docker stop flawis-mongo-staging-1 || true
          docker rm flawis-mongo-staging-1 || true
          docker-compose -f docker-compose.staging.yml up -d mongo-staging
          docker cp ./backup flawis-mongo-staging-1:/data/backup
          docker exec flawis-mongo-staging-1 sh -c 'mongorestore --uri="mongodb://localhost:27017" /data/backup'
          echo "MongoDB restore completed."

      - name: Clean up unused Docker resources
        run: docker system prune --all --force
        continue-on-error: true

      - name: Build and Deploy Staging
        env:
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_USER: ${{ secrets.MINIO_USER }}
          MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
          MINIO_ENDPOINT: ${{ vars.MINIO_ENDPOINT }}
          SECRET: ${{ secrets.SECRET }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ vars.MAIL_FROM }}
          RMQ_URI: ${{ vars.RMQ_URI }}
          RMQ_EXCHANGE: ${{ vars.RMQ_EXCHANGE }}
          REDIS_URI: ${{ vars.REDIS_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ vars.GOOGLE_REDIRECT_URI }}
        run: |
          echo "Building and deploying staging services..."
          docker-compose -f docker-compose.staging.yml up -d --build
          echo "Staging deployment completed."
