name: Build and Deploy to Staging
on:
  push:
    branches:
      - staging
jobs:
  build:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setting up node version
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # - name: Copy MongoDB data from production
      #   run: |
      #     # Step 1: Run mongodump inside the production MongoDB container
      #     docker exec flawis-mongo-1 sh -c 'mongodump --uri="mongodb://localhost:27017" --out=/data/backup'

      #     # Step 2: Copy the backup from the production MongoDB container to the local runner
      #     docker cp flawis-mongo-1:/data/backup ./backup

      #     # Step 3: Copy the backup from the runner to the staging MongoDB container
      #     docker cp ./backup flawis_staging-mongo-1:/data/backup

      #     # Step 4: Run mongorestore inside the staging MongoDB container
      #     docker exec flawis_staging-mongo-1 sh -c 'mongorestore --uri="mongodb://localhost:27017" /data/backup'

      # - name: Configure MinIO client and Mirror data from Production to Staging
      #   env:
      #     MINIO_ROOT_USER: ${{ secrets.MINIO_USER }}
      #     MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
      #   run: |
      #     mc alias set production http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
      #     mc alias set staging http://minio:9100 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
      #     mc mirror production/data staging/data

      # Step 2: Create .env file with GitHub secrets
      - name: Create .env file for core service
        run: |
          echo "NODE_ENV=production" > ./core/.env
          echo "SECRET=${{ secrets.SECRET }}" >> ./core/.env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> ./core/.env
          echo "RMQ_URI=${{ secrets.RMQ_URI }}" >> ./core/.env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ./core/.env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ./core/.env
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> ./core/.env
          # Add more environment variables as needed

      - name: Create .env file for client service
        run: |
          echo "NODE_ENV=production" > ./client/.env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ./client/.env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ./client/.env
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> ./client/.env
          # Add more environment variables as needed

      - name: Create .env file for mail service
        run: |
          echo "NODE_ENV=production" > ./mail/.env
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> ./mail/.env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> ./mail/.env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> ./mail/.env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> ./mail/.env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> ./mail/.env
          # Add more environment variables as needed

      - name: Build and Deploy Staging
        env:
          MINIO_USER: ${{ secrets.MINIO_USER }}
          MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
        run: |
          docker compose -p staging -f docker-compose.staging.yml up -d --build --remove-orphans
