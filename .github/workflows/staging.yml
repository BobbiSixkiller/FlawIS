name: Build and Deploy to Staging
on:
  push:
    branches:
      - staging
jobs:
  build:
    runs-on: [HyperV]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setting up node version
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Copy MongoDB data from production
        run: |
          # Step 1: Run mongodump inside the production MongoDB container
          docker exec flawis-mongo-1 sh -c 'mongodump --uri="mongodb://localhost:27017" --out=/data/backup'

          # Step 2: Copy the backup from the production MongoDB container to the local runner
          docker cp flawis-mongo-1:/data/backup ./backup

          # Step 3: Copy the backup from the runner to the staging MongoDB container
          docker cp ./backup flawis-mongo-staging-1:/data/backup

          # Step 4: Run mongorestore inside the staging MongoDB container
          docker exec flawis-mongo-staging-1 sh -c 'mongorestore --uri="mongodb://localhost:27017" /data/backup'

      - name: Copy Data from Production MinIO to Staging MinIO
        run: |
          # Step 1: Copy data from the production MinIO container to a temporary directory on the host
          docker cp flawis-minio-1:/data ./minio-data-backup

          # Step 2: Copy the data from the host to the staging MinIO container
          docker cp ./minio-data-backup flawis-minio-staging-1:/data

          # Step 3: Clean up the temporary directory
          rm -rf ./minio-data-backup

      # Step 2: Create .env file with GitHub secrets
      # - name: Create .env file for core service
      #   run: |
      #     echo "NODE_ENV=production" > ./core/.env
      #     echo "SECRET=${{ secrets.SECRET }}" >> ./core/.env
      #     echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> ./core/.env
      #     echo "RMQ_URI=${{ secrets.RMQ_URI }}" >> ./core/.env
      #     echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ./core/.env
      #     echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ./core/.env
      #     echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> ./core/.env
      #     # Add more environment variables as needed

      # - name: Create .env file for client service
      #   run: |
      #     echo "NODE_ENV=production" > ./client/.env
      #     echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ./client/.env
      #     echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ./client/.env
      #     echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> ./client/.env
      #     # Add more environment variables as needed

      # - name: Create .env file for mail service
      #   run: |
      #     echo "NODE_ENV=production" > ./mail/.env
      #     echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> ./mail/.env
      #     echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> ./mail/.env
      #     echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> ./mail/.env
      #     echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> ./mail/.env
      #     echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> ./mail/.env
      #     # Add more environment variables as needed

      - name: Build and Deploy Staging
        env:
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_USER: ${{ secrets.MINIO_USER }}
          MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
          SECRET: ${{ secrets.SECRET }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ vars.MAIL_FROM }}
          RMQ_URI: ${{ vars.RMQ_URI }}
          RMQ_EXCHANGE: ${{ vars.RMQ_EXCHANGE}}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ vars.GOOGLE_REDIRECT_URI }}
        run: |
          docker-compose -f docker-compose.staging.yml up -d --build
