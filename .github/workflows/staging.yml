name: Build and Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  cleanup:
    runs-on: [HyperV]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Clean old staging volumes
        run: |
          echo "Removing old staging volumes..."
          docker volume rm \
            flawis-staging_mongo_data_staging \
            flawis-staging_mongo_config_staging \
            flawis-staging_minio_storage_staging \
            flawis-staging_rabbitmq_data_staging \
            staging_mongo_data_staging \
            staging_mongo_config_staging \
            staging_minio_storage_staging \
            staging_rabbitmq_data_staging 2>/dev/null || true

      - name: Stop and remove old staging containers
        run: |
          docker-compose -f docker-compose.staging.yml -p flawis-staging down --rmi all || true
          docker container prune -f
          docker image prune -a -f
          docker builder prune -a -f
          docker network prune -f

  mongo:
    runs-on: [HyperV]
    needs: cleanup
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Copy MongoDB data from production
        run: |
          echo "Dumping production MongoDB (only flawis db)..."
          docker exec flawis-mongo-1 sh -c 'mongodump --uri="mongodb://localhost:27017/flawis" --out=/data/backup'
          docker cp flawis-mongo-1:/data/backup ./backup

      - name: Start staging MongoDB
        run: docker-compose -f docker-compose.staging.yml -p flawis-staging up -d mongo

      - name: Wait for MongoDB to be healthy
        run: |
          MONGO_CONTAINER=$(docker-compose -f docker-compose.staging.yml -p flawis-staging ps -q mongo)
          echo "Waiting for MongoDB to become healthy..."
          until [ "$(docker inspect -f '{{.State.Health.Status}}' $MONGO_CONTAINER)" == "healthy" ]; do
            echo "MongoDB not healthy yet..."
            sleep 2
          done
          echo "MongoDB is healthy: $MONGO_CONTAINER"

      - name: Initialize replica set if needed
        run: |
          MONGO_CONTAINER=$(docker-compose -f docker-compose.staging.yml -p flawis-staging ps -q mongo)
          echo "Checking/initializing replica set..."
          docker exec $MONGO_CONTAINER mongosh --host mongo --port 27017 --quiet --eval '
            try {
              rs.status();
              print("Replica set already initialized")
            } catch (e) {
              print("Initializing replica set...");
              rs.initiate({_id: "rs0", members: [{ _id: 0, host: "mongo:27017" }]});
            }
          '

      - name: Wait for MongoDB primary
        run: |
          MONGO_CONTAINER=$(docker-compose -f docker-compose.staging.yml -p flawis-staging ps -q mongo)
          echo "Waiting for MongoDB to become primary..."
          until docker exec $MONGO_CONTAINER mongosh --host mongo --port 27017 --quiet --eval "db.isMaster().ismaster" | grep -q true; do
            echo "MongoDB not primary yet..."
            sleep 2
          done
          echo "MongoDB is primary."

      - name: Restore MongoDB backup
        run: |
          MONGO_CONTAINER=$(docker-compose -f docker-compose.staging.yml -p flawis-staging ps -q mongo)
          echo "Ensuring /data/backup exists in staging container..."
          docker exec $MONGO_CONTAINER mkdir -p /data/backup
          echo "Copying backup into staging container..."
          docker cp ./backup/flawis $MONGO_CONTAINER:/data/backup/flawis
          echo "Restoring MongoDB backup..."
          docker exec $MONGO_CONTAINER sh -c 'mongorestore --drop --db flawis --uri="mongodb://mongo:27017" /data/backup/flawis'
          echo "MongoDB restore complete."

  minio:
    runs-on: [HyperV]
    needs: cleanup
    environment: staging
    env:
      MINIO_USER: ${{ secrets.MINIO_USER }}
      MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
    steps:
      - name: Install MinIO client
        run: |
          if ! command -v mc &> /dev/null; then
            wget https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            mkdir -p $HOME/bin
            mv mc $HOME/bin
            echo "$HOME/bin" >> $GITHUB_PATH
          fi

      - name: Start staging MinIO
        run: docker-compose -f docker-compose.staging.yml -p flawis-staging up -d minio

      - name: Wait for MinIO
        run: |
          echo "Waiting for MinIO to become ready..."
          until curl -f http://localhost:9100/minio/health/live 2>/dev/null; do
            echo "MinIO not ready yet..."
            sleep 2
          done
          echo "Staging MinIO is ready."

      - name: Sync data from production to staging
        run: |
          mc alias set production http://localhost:9000 $MINIO_USER $MINIO_PASSWORD
          mc alias set staging http://localhost:9100 $MINIO_USER $MINIO_PASSWORD
          mc mirror production/ staging/
          echo "MinIO sync completed."

      - name: Make buckets public (images, avatars)
        run: |
          mc anonymous set download staging/images
          mc anonymous set download staging/avatars
          echo "Buckets 'images' and 'avatars' are now public in staging."

  deploy:
    runs-on: [HyperV]
    needs: [mongo, minio]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build and deploy staging services
        env:
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_USER: ${{ secrets.MINIO_USER }}
          MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
          MINIO_ENDPOINT: ${{ vars.MINIO_ENDPOINT }}
          SECRET: ${{ secrets.SECRET }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ vars.MAIL_FROM }}
          RMQ_URI: ${{ vars.RMQ_URI }}
          RMQ_EXCHANGE: ${{ vars.RMQ_EXCHANGE }}
          REDIS_URI: ${{ vars.REDIS_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ vars.GOOGLE_REDIRECT_URI }}
        run: docker-compose -f docker-compose.staging.yml -p flawis-staging up -d --build
