name: Build and Deploy to Staging
on:
  push:
    branches:
      - staging
jobs:
  build:
    runs-on: [HyperV]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setting up node version
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Copy MongoDB data from production
        run: |
          # Step 1: Run mongodump inside the production MongoDB container
          docker exec flawis-mongo-1 sh -c 'mongodump --uri="mongodb://localhost:27017" --out=/data/backup'

          # Step 2: Copy the backup from the production MongoDB container to the local runner
          docker cp flawis-mongo-1:/data/backup ./backup

          # Step 3: Stop the staging MongoDB container
          docker stop flawis-mongo-staging-1

          # Step 4: Remove the staging MongoDB container (optional, only if you want a clean rebuild)
          docker rm flawis-mongo-staging-1

          # Step 5: Start the staging MongoDB container
          docker-compose -f docker-compose.staging.yml up -d mongo-staging

          # Step 6: Copy the backup to the new staging MongoDB container
          docker cp ./backup flawis-mongo-staging-1:/data/backup

          # Step 7: Run mongorestore inside the staging MongoDB container
          docker exec flawis-mongo-staging-1 sh -c 'mongorestore --uri="mongodb://localhost:27017" /data/backup'

      - name: Install MinIO client (if not already installed)
        run: |
          if ! command -v mc &> /dev/null
          then
            wget https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            mkdir -p $HOME/bin
            mv mc $HOME/bin/
            echo "$HOME/bin" >> $GITHUB_PATH
          else
            echo "MinIO client is already installed."
          fi

      - name: Copy Data from Production MinIO to Staging MinIO
        run: |
          mc alias set production http://localhost:9000 ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
          mc alias set staging http://localhost:9100 ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}

          mc mirror production/ staging/

      - name: Clean up unused Docker resources
        run: |
          docker system prune --all --force
        continue-on-error: true # Ensures that failure here doesn't block other steps

      - name: Build and Deploy Staging
        env:
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_USER: ${{ secrets.MINIO_USER }}
          MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
          MINIO_ENDPOINT: ${{ vars.MINIO_ENDPOINT }}
          SECRET: ${{ secrets.SECRET }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ vars.MAIL_FROM }}
          RMQ_URI: ${{ vars.RMQ_URI }}
          RMQ_EXCHANGE: ${{ vars.RMQ_EXCHANGE}}
          REDIS_URI: ${{ vars.REDIS_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ vars.GOOGLE_REDIRECT_URI }}
        run: |
          docker-compose -f docker-compose.staging.yml up -d --build
