version: "3.4"

services:
  core-staging:
    build:
      context: ./core
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      SECRET: ${SECRET}
      MONGODB_URI: "mongodb://mongo:27017/flawis?replicaSet=rs0"
      RMQ_EXCHANGE: ${RMQ_EXCHANGE}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      # AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      # AZURE_AUTHORITY: ${AZURE_AUTHORITY}
      # AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
    depends_on:
      minio-staging:
        condition: service_healthy
        restart: true
      rabbitmq-staging:
        condition: service_healthy
        restart: true
      redis-staging:
        condition: service_healthy
        restart: true
      mongo-staging:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    ports:
      - "5001:5000"

  client-staging:
    build:
      context: ./client
      dockerfile: Dockerfile
      # args:
      #   - NEXT_PUBLIC_BACKEND_URL=${BACKEND_URL}
    # env_file:
    #   - ./client/.env
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
    command: npm run start-prod
    depends_on:
      - core-staging
    restart: unless-stopped
    ports:
      - "3001:3000"

  mail-staging:
    build:
      context: ./mail
      dockerfile: Dockerfile
    # env_file:
    #   - ./mail/.env
    environment:
      NODE_ENV: production
      SECRET: ${SECRET}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      # MAIL_USER: ${MAIL_USER}
      # MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
      RMQ_URI: ${RMQ_URI}
      RMQ_EXCHANGE: ${RMQ_EXCHANGE}
    depends_on:
      rabbitmq-staging:
        condition: service_healthy
    restart: unless-stopped

  minio-staging:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9100:9000"
      - "9101:9001"
    volumes:
      - minio_storage_staging:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD-SHELL", "mc ready local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  rabbitmq-staging:
    image: rabbitmq
    restart: unless-stopped
    ports:
      - "5673:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping && rabbitmq-diagnostics -q status
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  redis-staging:
    image: redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD-SHELL", "echo 'PING' | redis-cli -h redis -x"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  mongo-staging:
    image: mongo:4.4.1
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - mongo_data_staging:/data/db
      - mongo_config_staging:/data/configdb
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo-staging:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongo_data_staging: {}
  mongo_config_staging: {}
  minio_storage_staging: {}
