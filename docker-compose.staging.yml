version: "3.4"

services:
  core-staging:
    build:
      context: ./core
      dockerfile: Dockerfile
    environment:
      NODE_ENV: staging
      SECRET: ${SECRET}
      MONGODB_URI: "mongodb://mongo-staging:27017/flawis?replicaSet=rs0"
      RMQ_EXCHANGE: ${RMQ_EXCHANGE}
      RMQ_URI: ${RMQ_URI}
      REDIS_URI: ${REDIS_URI}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
    depends_on:
      minio-staging:
        condition: service_healthy
      rabbitmq-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
      mongo-staging:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "5001:5000"
    networks:
      - staging-network

  client-staging:
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      API_URI: http://core-staging:5000/graphql
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
    command: npm run start
    depends_on:
      - core-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - staging-network

  mail-staging:
    build:
      context: ./mail
      dockerfile: Dockerfile
    environment:
      NODE_ENV: staging
      SECRET: ${SECRET}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_FROM: ${MAIL_FROM}
      RMQ_URI: amqp://rabbitmq-staging:5672
      RMQ_EXCHANGE: ${RMQ_EXCHANGE}
    depends_on:
      rabbitmq-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  minio-staging:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9100:9000"
      - "9101:9001"
    volumes:
      - minio_storage_staging:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD-SHELL", "mc ready local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - staging-network

  rabbitmq-staging:
    image: rabbitmq
    restart: unless-stopped
    ports:
      - "5673:5672"
    volumes:
      - rabbitmq_data_staging:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - staging-network

  redis-staging:
    image: redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD-SHELL", "echo 'PING' | redis-cli -h redis -x"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - staging-network

  mongo-staging:
    image: mongo:7.0
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - mongo_data_staging:/data/db
      - mongo_config_staging:/data/configdb
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo-staging/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - staging-network

volumes:
  mongo_data_staging: {}
  mongo_config_staging: {}
  minio_storage_staging: {}
  rabbitmq_data_staging: {}

networks:
  staging-network:
    driver: bridge
