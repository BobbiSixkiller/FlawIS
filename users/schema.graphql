# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  city: String!
  country: String!
  postal: String!
  street: String!
}

input AddressInput {
  city: String!
  country: String!
  postal: String!
  street: String!
}

"""Attendee model type"""
type Attendee {
  conference: Conference!
  createdAt: DateTimeISO!
  id: ObjectId!
  invoice: Invoice!
  submissions: [Submission!]!
  ticket: Ticket!
  updatedAt: DateTimeISO!
  user: User!
}

input AttendeeBillingInput {
  DIC: String
  ICDPH: String
  ICO: String
  address: AddressInput!
  name: String!
}

"""AttendeeConnection type enabling cursor based pagination"""
type AttendeeConnection {
  edges: [AttendeeEdge]!
  pageInfo: AttendeePageInfo!
}

type AttendeeEdge {
  cursor: ObjectId!
  node: Attendee!
}

"""Conference registration input type"""
input AttendeeInput {
  billing: AttendeeBillingInput!
  conferenceId: ObjectId!
  ticketId: ObjectId!
}

type AttendeeMutationResponse implements IMutationResponse {
  data: Attendee!
  message: String!
}

type AttendeePageInfo {
  endCursor: ObjectId!
  hasNextPage: Boolean!
}

"""Billing information"""
type Billing {
  DIC: String
  ICDPH: String
  ICO: String!
  address: Address!
  name: String!
}

"""Conference model type"""
type Conference {
  attendeesCount: Int!
  attending: Attendee
  billing: ConferenceBilling!
  createdAt: DateTimeISO!
  dates: ImportantDates!
  id: ObjectId!
  sections: [Section!]!
  slug: String!
  tickets: [Ticket!]!
  translations: ConferenceTranslation!
  updatedAt: DateTimeISO!
}

"""Conference billing information"""
type ConferenceBilling {
  DIC: String!
  IBAN: String!
  ICDPH: String!
  ICO: String!
  SWIFT: String!
  address: Address!
  name: String!
  stampUrl: String!
  variableSymbol: String!
}

input ConferenceBillingInput {
  DIC: String!
  IBAN: String!
  ICDPH: String!
  ICO: String!
  SWIFT: String!
  address: AddressInput!
  name: String!
  stampUrl: String!
  variableSymbol: String!
}

"""ConferenceConnection type enabling cursor based pagination"""
type ConferenceConnection {
  edges: [ConferenceEdge]!
  pageInfo: ConferencePageInfo!
}

type ConferenceEdge {
  cursor: ObjectId!
  node: Conference!
}

"""Conference input type"""
input ConferenceInput {
  billing: ConferenceBillingInput!
  dates: DatesInput!
  slug: String!
  translations: ConferenceTranslationInput!
}

type ConferenceMutationResponse implements IMutationResponse {
  data: Conference!
  message: String!
}

type ConferencePageInfo {
  endCursor: ObjectId!
  hasNextPage: Boolean!
}

type ConferenceTranslation {
  en: ConferenceTranslations!
  sk: ConferenceTranslations!
}

input ConferenceTranslationInput {
  en: LocalizedConferenceInputs!
  sk: LocalizedConferenceInputs!
}

type ConferenceTranslations {
  logoUrl: String!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DatesInput {
  end: DateTimeISO!
  regEnd: DateTimeISO
  start: DateTimeISO!
  submissionDeadline: DateTimeISO
}

interface IMutationResponse {
  message: String!
}

"""Important dates regarding conference"""
type ImportantDates {
  end: DateTimeISO!
  regEnd: DateTimeISO
  start: DateTimeISO!
  submissionDeadline: DateTimeISO
}

"""Invoice entity subdocument type"""
type Invoice {
  body: InvoiceData!
  issuer: ConferenceBilling!
  payer: Billing!
}

"""The body of an invoice"""
type InvoiceData {
  body: String!
  comment: String!
  dueDate: DateTimeISO!
  issueDate: DateTimeISO!
  price: Float!
  type: String!
  vat: Float!
  vatDate: DateTimeISO!
}

input InvoiceDataInput {
  body: String!
  comment: String!
  dueDate: DateTimeISO!
  issueDate: DateTimeISO!
  price: Float!
  type: String!
  vat: Float!
  vatDate: DateTimeISO!
}

input InvoiceInput {
  body: InvoiceDataInput!
  issuer: ConferenceBillingInput!
  payer: AttendeeBillingInput!
}

input LocalizedConferenceInputs {
  logoUrl: String!
  name: String!
}

input LocalizedSectionInputs {
  name: String!
  topic: String!
}

input LocalizedSubmissionInputs {
  abstract: String!
  keywords: [String!]!
  name: String!
}

input LocalizedTicketInputs {
  description: String!
  name: String!
}

type Mutation {
  activateUser: UserMutationResponse!
  addAttendee(data: AttendeeInput!): ConferenceMutationResponse!
  createConference(data: ConferenceInput!): ConferenceMutationResponse!
  createSection(data: SectionInput!): SectionMutationResponse!
  createSubmission(data: SubmissionInput!): SubmissionMutationResponse!
  createTicket(data: TicketInput!, slug: String!): ConferenceMutationResponse!
  deleteAttendee(id: ObjectId!): AttendeeMutationResponse!
  deleteConference(id: ObjectId!): ConferenceMutationResponse!
  deleteSection(id: ObjectId!): String!
  deleteSubmission(id: ObjectId!): SubmissionMutationResponse!
  deleteTicket(slug: String!, ticketId: ObjectId!): String!
  deleteUser(id: ObjectId!): UserMutationResponse!
  login(email: String!, password: String!): UserMutationResponse!
  passwordReset(data: PasswordInput!): UserMutationResponse!
  register(data: RegisterInput!): UserMutationResponse!
  resendActivationLink: String!
  toggleVerifiedUser(id: ObjectId!): UserMutationResponse!
  updateConferenceDates(data: DatesInput!, slug: String!): ConferenceMutationResponse!
  updateInvoice(data: InvoiceInput!, id: ObjectId!): AttendeeMutationResponse!
  updateSection(data: SectionInput!, id: ObjectId!): SectionMutationResponse!
  updateSubmission(data: SubmissionInput!, id: ObjectId!): SubmissionMutationResponse!
  updateTicket(data: TicketInput!, slug: String!, ticketId: ObjectId!): ConferenceMutationResponse!
  updateUser(data: UserInput!, id: ObjectId!): UserMutationResponse!
}

"""Mongo object id scalar type"""
scalar ObjectId

input PasswordInput {
  password: String!
}

type Query {
  attendee(id: ObjectId!): Attendee!
  attendees(after: ObjectId, conferenceSlug: String!, first: Int! = 20, passive: Boolean, sectionIds: [ObjectId]! = []): AttendeeConnection!
  attendeesCsvExport(slug: String!): [Attendee!]!
  conference(slug: String!): Conference!
  conferences(after: ObjectId, first: Int! = 20): ConferenceConnection!
  forgotPassword(email: String!): String!
  me: User!
  submission(id: ObjectId!): Submission!
  textSearchConference(text: String!): [Conference!]!
  textSearchUser(text: String!): [User!]!
  user(id: ObjectId!): User!
  users(after: ObjectId, first: Int! = 20): UserConnection!
}

"""New user input data"""
input RegisterInput {
  email: String!
  name: String!
  organization: String!
  password: String!
  telephone: String!
}

"""User role inside the FLAWIS system"""
enum Role {
  Admin
  Basic
}

"""Conference's section entity model type"""
type Section {
  conference: String!
  createdAt: DateTimeISO!
  id: ID!
  submissions: [Submission!]!
  translations: SectionTranslation!
  updatedAt: DateTimeISO!
}

"""Section input type"""
input SectionInput {
  conference: ObjectId!
  translations: SectionTranslationInput!
}

type SectionMutationResponse implements IMutationResponse {
  data: Section!
  message: String!
}

type SectionTranslation {
  en: SectionTranslations!
  sk: SectionTranslations!
}

input SectionTranslationInput {
  en: LocalizedSectionInputs!
  sk: LocalizedSectionInputs!
}

type SectionTranslations {
  name: String!
  topic: String!
}

"""Submission entity model type"""
type Submission {
  authors: [User!]!
  conference: Conference!
  createdAt: DateTimeISO!
  fileUrl: String
  id: ID!
  section: Section!
  translations: SubmissionTranslation!
  updatedAt: DateTimeISO!
}

input SubmissionInput {
  authors: [String]!
  conference: ObjectId!
  fileUrl: String
  section: ObjectId!
  translations: SubmissionTranslationInput!
}

type SubmissionMutationResponse implements IMutationResponse {
  data: Submission!
  message: String!
}

type SubmissionTranslation {
  en: SubmissionTranslationContent!
  sk: SubmissionTranslationContent!
}

type SubmissionTranslationContent {
  abstract: String!
  keywords: [String!]!
  name: String!
}

input SubmissionTranslationInput {
  en: LocalizedSubmissionInputs!
  sk: LocalizedSubmissionInputs!
}

"""Conference ticket"""
type Ticket {
  id: ObjectId!
  online: Boolean!
  price: Int!
  translations: TicketTranslation!
  withSubmission: Boolean!
}

input TicketInput {
  online: Boolean!
  price: Int!
  translations: TicketTranslationInput!
  withSubmission: Boolean!
}

type TicketTranslation {
  en: TicketTranslations!
  sk: TicketTranslations!
}

input TicketTranslationInput {
  en: LocalizedTicketInputs!
  sk: LocalizedTicketInputs!
}

type TicketTranslations {
  description: String!
  name: String!
}

"""The user model entity"""
type User {
  billings: [Billing]!
  createdAt: DateTimeISO!
  email: String!
  id: ObjectId!
  name: String!
  organization: String!
  role: Role!
  telephone: String!
  token: String!
  updatedAt: DateTimeISO!
  verified: Boolean!
}

"""UserConnection type enabling cursor based pagination"""
type UserConnection {
  edges: [UserEdge]!
  pageInfo: UserPageInfo!
}

type UserEdge {
  cursor: ObjectId!
  node: User!
}

"""User update input data"""
input UserInput {
  email: String!
  name: String!
  organization: String!
  password: String
  role: Role
  telephone: String!
}

type UserMutationResponse implements IMutationResponse {
  data: User!
  message: String!
}

type UserPageInfo {
  endCursor: ObjectId!
  hasNextPage: Boolean!
}